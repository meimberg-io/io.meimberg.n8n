name: Build and Deploy n8n

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=semver,pattern={{version}}
          type=raw,value=latest

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    env:
      APP_DOMAIN: ${{ vars.APP_DOMAIN }}
      DOCKER_IMAGE: ghcr.io/${{ github.repository }}:latest
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      WEBHOOK_URL: ${{ vars.WEBHOOK_URL }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Copy docker-compose template to server
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ vars.SERVER_HOST }}
        username: ${{ vars.SERVER_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        source: "docker-compose.prod.yml"
        target: "/srv/projects/n8n/"
    
    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ vars.SERVER_HOST }}
        username: ${{ vars.SERVER_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        envs: GITHUB_TOKEN,DOCKER_IMAGE,APP_DOMAIN,WEBHOOK_URL
        script: |
          set -e
          
          # Login to GitHub Container Registry
          echo "$GITHUB_TOKEN" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          # Create project directory
          mkdir -p /srv/projects/n8n
          cd /srv/projects/n8n
          
          # Create backup directory (owned by UID 1000 for n8n container)
          sudo mkdir -p /srv/projects/n8n/backup
          sudo chown -R 1000:1000 /srv/projects/n8n/backup
          
          # Substitute variables in docker-compose template
          export DOCKER_IMAGE="${DOCKER_IMAGE}"
          export APP_DOMAIN="${APP_DOMAIN}"
          export WEBHOOK_URL="${WEBHOOK_URL}"
          
          envsubst < docker-compose.prod.yml > docker-compose.yml
          
          echo "Generated docker-compose.yml:"
          cat docker-compose.yml
          
          # Pull latest image and deploy
          docker compose pull
          docker compose up -d
          
          # Wait for container to be ready
          sleep 5
          
          # Verify deployment
          if docker ps | grep -q n8n; then
            echo "‚úÖ n8n deployed successfully!"
            echo "üåê Accessible at: https://${APP_DOMAIN}"
          else
            echo "‚ùå Deployment failed - container not running"
            docker logs n8n
            exit 1
          fi
